import subprocess
import json

# Required Github permissions: "Security alerts" repository permissions (read)
# Rule: Usage of a vulnerability management system
# Ideas: Check for enabled Dependabot alerts, code scanning alerts, and secret scanning alerts
#        Could be extended to check for third-party vulnerability management integrations

def check_l3_7_vulnerability_management(repo):
    try:
        # Check for Dependabot alerts
        dependabot_result = subprocess.run(
            ['gh', 'api', f'/repos/{repo}/dependabot/alerts?state=open&per_page=1'],
            capture_output=True, text=True
        )
        
        # Check for code scanning alerts
        code_scanning_result = subprocess.run(
            ['gh', 'api', f'/repos/{repo}/code-scanning/alerts?state=open&per_page=1'],
            capture_output=True, text=True
        )
        
        # Check for secret scanning alerts
        secret_scanning_result = subprocess.run(
            ['gh', 'api', f'/repos/{repo}/secret-scanning/alerts?state=open&per_page=1'],
            capture_output=True, text=True
        )
        
        systems = []
        if dependabot_result.returncode == 0:
            systems.append("Dependabot")
        if code_scanning_result.returncode == 0:
            systems.append("Code scanning")
        if secret_scanning_result.returncode == 0:
            systems.append("Secret scanning")
        
        if systems:
            return f"Detected ({', '.join(systems)})"
        else:
            return "Not detected"

    except subprocess.CalledProcessError:
        return "Unable to check"
    except json.JSONDecodeError:
        return "Error parsing data"
    except Exception as e:
        return "Error exception"
